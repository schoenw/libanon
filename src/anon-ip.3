.\"                              hey, Emacs:   -*- nroff -*-
.TH anon-ip 3 "March 16, 2006"
.\" Please update the above date whenever this man page is modified.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins (default)
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
anon-ip \- IP address anonymization functions of the \fBlibanon\fP
anonymization library
.SH SYNOPSIS
.B #include <libanon.h>
.sp
/*
 * IPv4 address anonymization API.
 */

struct _anon_ipv4 {
    struct node *tree;
    int nodes;
    AES_KEY aes_key;	/* AES key */
    uint8_t m_key[16];	/* 128 bit secret key */
    uint8_t m_pad[16];	/* 128 bit secret pad */
};
typedef struct _anon_ipv4 anon_ipv4_t;

.BI "anon_ipv4_t* anon_ipv4_new();"
.br
.BI "void anon_ipv4_set_key(anon_ipv4_t *" a ", const uint8_t *" key ");"
.br
.BI "int anon_ipv4_set_used(anon_ipv4_t *" a ", in_addr_t " ip ", int " prefixlen ");"
.br
.BI "int anon_ipv4_map_pref(anon_ipv4_t *" a ", const in_addr_t" ip ","
.br
.BI "					in_addr_t *" aip ");"
.br
.BI "int anon_ipv4_map_pref_lex(anon_ipv4_t *" a ", const in_addr_t " ip ","
.br
.BI "				in_addr_t *" aip ");"
.br
.BI "void anon_ipv4_delete(anon_ipv_t *" a ");"

/*
 * IPv6 address anonymization API.
 */

typedef struct _anon_ipv6 anon_ipv6_t;
.br
typedef struct in6_addr in6_addr_t;

.BI "anon_ipv6_t* anon_ipv6_new();"
.br
.BI "void anon_ipv6_set_key(anon_ipv6_t *" a ", const uint8_t *" key ");"
.br
.BI "int anon_ipv6_set_used(anon_ipv6_t *" a ", in6_addr_t " ip ", int " prefixlen ");"
.br
.BI "int anon_ipv6_map_pref(anon_ipv6_t *" a ", const in6_addr_t" ip ","
.br
.BI "					in6_addr_t *" aip ");"
.br
.BI "int anon_ipv6_map_pref_lex(anon_ipv_t *" a ", const in6_addr_t " ip ","
.br
.BI "				in6_addr_t *" aip ");"
.br
.BI "void anon_ipv6_delete(anon_ipv6_t *" a ");"

.SH DESCRIPTION
This man page describes IP address anonymization functions (both IPv4
and IPv6) of the \fBlibanon\fP anonymization library. We give a
detailed description of the IPv4 API, IPv6 is similar. 

\fBanon_ipv4_new\fP creates a new anonymization object. An
anonymization object has to be created for each data type that should
be anonymized, i.e., IPv4, IPv6, integers,... At the end of
anonymization, resources of the anonymization object have to be freed
up with \fBanon_ipv4_delete\fP.


Afterwards, a key  is set with the anon_ipv4_set_key function.
.\" TODO:
.\" In
.\" case this is omitted a random key is generated.
The key is used for the cryptographic functions for
anonymization. Using the same key one can obtain consistent
anonymization of IP addresses (given the same set of used addresses).

For prefix-preserving only anonymization, simply use
\fBanon_ipv4_map_pref\fP for every IP address to be
anonymized. \fUip\fP is expected in \fBNetwork-byte\fP order, as
returned by inet_pton(3). The anonymized address \fUaip\fP is returned
in Network-byte order as well.

The prefix- and lexicographical-order-preserving anonymization works
in two passes. First, all addresses in the trace need to be marked as
used (for given anonymization object) by calling the
\fBanon_ipv4_set_used\fP function. One can also mark a complete subnet
as used by using a shorter prefix length
\fUprefixlen\fP. \fUprefixlen\fP values < 1 imply only one IP address
has to be marked as used rather than a subnet. After all addresses
have been marked as used, i.e., in the second pass, one can start with
retrieving the anonymized versions of the addresses. This is done by
calling the \fBanon_ipv4_map_pref_lex\fP function.

One can obtain consistent anonymization by using the same key for
prefix-preserving only anonymization. For prefix- and
lexicographical-order-preserving anonymization, one needs the same key
and set of used addresses to obtain consistent anonymization. One way
of achieving the same set of used addresses is to mark complete
subnets as used.

.SH "RETURN VALUES"
\fBanon_ipv4_set_used\fP, \fBanon_ipv4_map_pref\fP and
\fBanon_ipv4_map_pref_lex\fP return zero on success, non-zero
otherwise.
.br
\fBanon_ipv4_new\fP return the anonymization object on success, NULL
otherwise.

.SH EXAMPLES
A very good source of examples is the libanon/anon.c program.

.SH BUGS
Please note that this implementation is not compatible with
Crypto-PAn, i.e. using the same key, anonymized addresses would
differ. The main reason for this is the difference in byte-order.
.PP
Because
.B lh_insert
does not have a return code to detect errors, we do not detect
insertion fails.
.PP
There may be more.

.SH "SEE ALSO"
.BR anon (1),
.BR anon-ip (3),
.BR anon-int (3),
.BR anon-string (3),
.BR anon-ipv6 (3),
.BR anon-mac (3),
.BR anon-int64 (3),
.BR anon-uint64 (3),
.BR anon (3)


.SH AUTHOR
Matus Harvan <m.harvan@iu-bremen.de>
.br
Juergen Schoenwaelder <j.schoenwaelder@iu-bremen.de>.
